import { User } from 'src/database/entity/user.entity';
import { Repository } from 'typeorm';
import { RegistrationDTO, LoginDTO, AdminRegistrationDTO, UpdatePasswordDTO, ProfileDTO, BankDTO } from './accounts.dto';
import { EPin } from 'src/database/entity/epin.entity';
import { RankService } from 'src/rank/rank.service';
import { IncomeService } from 'src/income/income.service';
import { UserDetailsRO, UserRO } from 'src/interfaces';
import { JwtService } from '@nestjs/jwt';
import { Observable } from 'rxjs';
import { AWSHandler } from 'src/common/aws/aws';
export declare class AccountsService {
    private readonly userRepo;
    private readonly epinRepo;
    private readonly incomeService;
    private readonly rankService;
    private readonly jwtService;
    private readonly aws;
    constructor(userRepo: Repository<User>, epinRepo: Repository<EPin>, incomeService: IncomeService, rankService: RankService, jwtService: JwtService, aws: AWSHandler);
    findOne(id: string): Observable<UserRO>;
    getAll(): Promise<UserRO[]>;
    login(data: LoginDTO, admin?: boolean): Promise<UserRO>;
    register(data: RegistrationDTO): Promise<UserRO>;
    getDetails(userId: string): Promise<UserDetailsRO>;
    registerAdmin(data: AdminRegistrationDTO): Promise<UserRO>;
    activateAccount(epinId: string, userId: string): Promise<UserRO>;
    updateProfile(data: ProfileDTO, userId: string): Promise<string>;
    updatePassword(data: UpdatePasswordDTO, userId: string): Promise<string>;
    forgotPassword(id: string, newPassword: string): Promise<string>;
    updateBankDetails(data: BankDTO, userId: string): Promise<string>;
    updateSponsor(userId: string, sponsorId: string): Promise<UserRO>;
    resetBalance(): Promise<string>;
    deleteUser(id: string): Promise<string>;
    private generateJWT;
}
